// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	mock "github.com/stretchr/testify/mock"

	models "github.com/andrei1998Front/grpc_img_srvr/internal/domain/models"
)

// ImgUploader is an autogenerated mock type for the ImgUploader type
type ImgUploader struct {
	mock.Mock
}

// CheckExists provides a mock function with given fields: filename
func (_m *ImgUploader) CheckExists(filename string) bool {
	ret := _m.Called(filename)

	if len(ret) == 0 {
		panic("no return value specified for CheckExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filename)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Upload provides a mock function with given fields: filename, chunk
func (_m *ImgUploader) Upload(filename string, chunk bytes.Buffer) (models.ImgInfo, error) {
	ret := _m.Called(filename, chunk)

	if len(ret) == 0 {
		panic("no return value specified for Upload")
	}

	var r0 models.ImgInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, bytes.Buffer) (models.ImgInfo, error)); ok {
		return rf(filename, chunk)
	}
	if rf, ok := ret.Get(0).(func(string, bytes.Buffer) models.ImgInfo); ok {
		r0 = rf(filename, chunk)
	} else {
		r0 = ret.Get(0).(models.ImgInfo)
	}

	if rf, ok := ret.Get(1).(func(string, bytes.Buffer) error); ok {
		r1 = rf(filename, chunk)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewImgUploader creates a new instance of ImgUploader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewImgUploader(t interface {
	mock.TestingT
	Cleanup(func())
}) *ImgUploader {
	mock := &ImgUploader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
